# Utiliser une image Docker avec Maven et Java
image: maven:3.8.4-eclipse-temurin-17

# Stages de pipeline
stages:
  - build
  - test
  - package

variables:
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository


# Étape 1: Compilation du projet
build_job:
  stage: build
  script:
    # Temp: liste des fichiers dans TourGuide
    - ls -al TourGuide/libs/
    # Installation des jar locaux
    - mvn install:install-file -Dfile=TourGuide/libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
    - mvn install:install-file -Dfile=TourGuide/libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
    - mvn install:install-file -Dfile=TourGuide/libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
    # Compilation du projet
    - cd TourGuide
    - mvn compile $MAVEN_OPTS
  artifacts:
    paths:
      - .m2/repository # Cache Maven à partager avec les autres jobs

# Étape 2: Lancement des tests (les tests de performances sont désactivés pendant la configuration initiale)
test_job:
  stage: test
  script:
    - cd TourGuide # Accès au pom.xml
    - mvn test $MAVEN_OPTS  # Désactivation des tests ici
  dependencies:
    - build_job

# Étape 3: Docker: Construire de l'image après compilation
docker_build:
  stage: package
  image: docker:latest # Image Docker uniquement pour la partie Docker
  script:
    #Construction de l'image Docker
    - docker build -t tourguide-app -f TourGuide/Dockerfile TourGuide/
    - docker image ls # Vérification des images Docker
  dependencies:
    - build_job
  # Sauvegarde du fichier jar généré comme artefact
  artifacts:
    paths:
      - target/*.jar  # Le jar sera sauvegardé comme artefact
