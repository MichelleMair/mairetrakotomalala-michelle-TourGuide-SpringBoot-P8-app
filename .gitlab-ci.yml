# Utiliser une image Docker avec Maven et Java
image: maven:3.8.4-eclipse-temurin-17

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

# Caching Maven repository to reuse dependencies
cache:
  key: "$CI_JOB_NAME"
  paths:
    - .m2/repository

# Stages de pipeline
stages:
  - build
  - test
  - package

before_script:
 - docker info
 - mvn --version


# Étape 1: Compilation du projet
build_job:
  stage: build
  script:
    # Temp: liste des fichiers dans TourGuide
    - ls -al TourGuide/
    - mvn install:install-file -Dfile=libs/gpsUtil.jar -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion=1.0.0 -Dpackaging=jar
    - mvn install:install-file -Dfile=libs/RewardCentral.jar -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion=1.0.0 -Dpackaging=jar
    - mvn install:install-file -Dfile=libs/TripPricer.jar -DgroupId=tripPricer -DartifactId=tripPricer -Dversion=1.0.0 -Dpackaging=jar
    - mvn compile
  artifacts:
    paths:
      - .m2/repository

# Étape 2: Création de l'image après compilation avec Docker
docker_build:
  stage: package
  image: docker:latest # Passe à une image Docker ici pour les commandes Docker
  script:
    - docker_build -t tourguide-app -f TourGuide/Dockerfile TourGuide/
  dependencies:
    - build_job
  # Sauvegarde du fichier jar généré comme artefact
  artifacts:
    paths:
      - target/*.jar  # Le jar sera sauvegardé comme artefact
